{"ast":null,"code":"import _objectSpread from\"E:/CodeProject/SA_Project/Oracle_frontend/my-app/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState}from'react';import axios from'axios';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function CoinInput(){// store the user input\nconst[formData,setFormData]=useState({target:'',coinList:''});const[errorInfo,setErrorInfo]=useState('');const[result,setResult]=useState('');// change user input\nconst handleFormDataChange=event=>{const{name,value}=event.target;setFormData(_objectSpread(_objectSpread({},formData),{},{[name]:value}));};// Validate coinList to ensure only numbers and commas are present\nconst validateCoinList=coinList=>{const regex=/^(\\d+(\\.\\d{1,2})?)(,\\d+(\\.\\d{1,2})?)*$/;// Regex for numbers separated by commas, allowing up to 2 decimal places\nreturn regex.test(coinList);};// Validate if target is a valid number\nconst validateTarget=target=>{const regex=/^\\d+(\\.\\d{1,2})?$/;// Regex for positive numbers with up to 2 decimal places\nreturn regex.test(target);};// send to back-end\nconst handleSubmit=async event=>{event.preventDefault();// Validate target\nif(!validateTarget(formData.target)){setErrorInfo('Invalid Target: Please enter a number between 0 and 10000, allowing up to 2 decimal places.');return;}// Validate coinList\nif(!validateCoinList(formData.coinList)){setErrorInfo('Invalid Coin List: Please enter numbers separated by commas, allowing up to 2 decimal places.');return;}// Convert coinList from comma-separated string to an array of numbers\nconst coinListArray=formData.coinList.split(',').map(item=>parseFloat(item.trim())).filter(item=>!isNaN(item));// Filter out invalid values\nconst sendFormData=_objectSpread(_objectSpread({},formData),{},{coinList:coinListArray});try{// send Post Request\nconst response=await axios.post(\"http://175.41.154.128:80/Coin-game\",sendFormData,{withCredentials:true});// handle back-data\nif(response.status===200){setResult(JSON.stringify(response.data));setErrorInfo('');}else if(response.status===400){setErrorInfo('Your Input Are Invalid');}}catch(error){var _error$response;setErrorInfo((_error$response=error.response)===null||_error$response===void 0?void 0:_error$response.data);}};return/*#__PURE__*/_jsxs(\"div\",{style:{padding:'20px',maxWidth:'500px',margin:'auto'},children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Coin Target Game\"}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,children:[/*#__PURE__*/_jsxs(\"div\",{style:{marginBottom:'10px'},children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"target\",style:{display:'block',marginBottom:'5px'},children:\"Target:\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"target\",name:\"target\",value:formData.target,onChange:handleFormDataChange,placeholder:\"Input the number from 1-10000,only allow 2 decimal places\",required:true,style:{width:'100%',padding:'8px'}})]}),/*#__PURE__*/_jsxs(\"div\",{style:{marginBottom:'10px'},children:[/*#__PURE__*/_jsx(\"label\",{htmlFor:\"coinList\",style:{display:'block',marginBottom:'5px'},children:\"Coin List (comma-separated):\"}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",id:\"coinList\",name:\"coinList\",value:formData.coinList,onChange:handleFormDataChange,placeholder:\"Input the coins,from [0.01, 0.05, 0.1, 0.2, 0.5, 1, 2, 5, 10, 50, 100, 1000]\",required:true,style:{width:'100%',padding:'8px'}})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",style:{backgroundColor:'#4CAF50',color:'white',padding:'10px 20px',border:'none',cursor:'pointer',width:'50%'},children:\"Submit\"})]}),errorInfo&&/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'20px',color:'red'},children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Error:\"}),\" \",JSON.stringify(errorInfo)]}),result&&!errorInfo&&/*#__PURE__*/_jsxs(\"div\",{style:{marginTop:'20px',color:'green',whiteSpace:'pre-wrap',wordWrap:'break-word'},children:[/*#__PURE__*/_jsx(\"strong\",{children:\"Result:\"}),/*#__PURE__*/_jsx(\"div\",{children:result})]})]});}","map":{"version":3,"names":["React","useState","axios","jsx","_jsx","jsxs","_jsxs","CoinInput","formData","setFormData","target","coinList","errorInfo","setErrorInfo","result","setResult","handleFormDataChange","event","name","value","_objectSpread","validateCoinList","regex","test","validateTarget","handleSubmit","preventDefault","coinListArray","split","map","item","parseFloat","trim","filter","isNaN","sendFormData","response","post","withCredentials","status","JSON","stringify","data","error","_error$response","style","padding","maxWidth","margin","children","onSubmit","marginBottom","htmlFor","display","type","id","onChange","placeholder","required","width","backgroundColor","color","border","cursor","marginTop","whiteSpace","wordWrap"],"sources":["E:/CodeProject/SA_Project/Oracle_frontend/my-app/src/components/CoinInput.js"],"sourcesContent":["import React,{useState} from 'react'\r\nimport axios from 'axios'\r\n\r\nexport default function CoinInput(){\r\n    // store the user input\r\n    const [formData,setFormData] = useState({\r\n        target: '',\r\n        coinList: ''\r\n    });\r\n\r\n    const [errorInfo,setErrorInfo] = useState('')\r\n\r\n    const [result,setResult] = useState('')\r\n\r\n    // change user input\r\n    const handleFormDataChange = (event) =>{\r\n        const {name,value} = event.target\r\n        setFormData({\r\n            ...formData,\r\n            [name]: value\r\n        });\r\n    };\r\n\r\n    // Validate coinList to ensure only numbers and commas are present\r\n    const validateCoinList = (coinList) => {\r\n        const regex = /^(\\d+(\\.\\d{1,2})?)(,\\d+(\\.\\d{1,2})?)*$/; // Regex for numbers separated by commas, allowing up to 2 decimal places\r\n        return regex.test(coinList);\r\n    };\r\n\r\n    // Validate if target is a valid number\r\n    const validateTarget = (target) => {\r\n        const regex = /^\\d+(\\.\\d{1,2})?$/; // Regex for positive numbers with up to 2 decimal places\r\n        return regex.test(target);\r\n    };\r\n\r\n    // send to back-end\r\n    const handleSubmit = async (event) =>{\r\n        event.preventDefault();\r\n\r\n        // Validate target\r\n        if (!validateTarget(formData.target)) {\r\n            setErrorInfo('Invalid Target: Please enter a number between 0 and 10000, allowing up to 2 decimal places.');\r\n            return;\r\n        }\r\n\r\n        // Validate coinList\r\n        if (!validateCoinList(formData.coinList)) {\r\n            setErrorInfo('Invalid Coin List: Please enter numbers separated by commas, allowing up to 2 decimal places.');\r\n            return;\r\n        }\r\n\r\n        // Convert coinList from comma-separated string to an array of numbers\r\n        const coinListArray = formData.coinList\r\n        .split(',')\r\n        .map(item => parseFloat(item.trim()))\r\n        .filter(item => !isNaN(item)); // Filter out invalid values\r\n\r\n        const sendFormData = {\r\n        ...formData,\r\n        coinList: coinListArray\r\n        };\r\n\r\n\r\n        try{\r\n            // send Post Request\r\n            const response = await axios.post(\"http://175.41.154.128:80/Coin-game\",sendFormData,{withCredentials:true});\r\n            // handle back-data\r\n            if(response.status === 200){\r\n                setResult(JSON.stringify(response.data));\r\n                setErrorInfo('');\r\n            }else if(response.status === 400){\r\n                setErrorInfo('Your Input Are Invalid')\r\n            }\r\n        }catch(error){\r\n            setErrorInfo(error.response?.data);\r\n        }\r\n\r\n    }\r\n\r\nreturn (\r\n    <div style={{ padding: '20px', maxWidth: '500px', margin: 'auto' }}>\r\n      <h2>Coin Target Game</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <div style={{ marginBottom: '10px' }}>\r\n          <label htmlFor=\"target\" style={{ display: 'block', marginBottom: '5px' }}>\r\n            Target:\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"target\"\r\n            name=\"target\"\r\n            value={formData.target}\r\n            onChange={handleFormDataChange}\r\n            placeholder='Input the number from 1-10000,only allow 2 decimal places'\r\n            required\r\n            style={{ width: '100%', padding: '8px' }}\r\n          />\r\n        </div>\r\n\r\n        <div style={{ marginBottom: '10px' }}>\r\n          <label htmlFor=\"coinList\" style={{ display: 'block', marginBottom: '5px' }}>\r\n            Coin List (comma-separated):\r\n          </label>\r\n          <input\r\n            type=\"text\"\r\n            id=\"coinList\"\r\n            name=\"coinList\"\r\n            value={formData.coinList}\r\n            onChange={handleFormDataChange}\r\n            placeholder=\"Input the coins,from [0.01, 0.05, 0.1, 0.2, 0.5, 1, 2, 5, 10, 50, 100, 1000]\"\r\n            required\r\n            style={{ width: '100%', padding: '8px' }}\r\n          />\r\n        </div>\r\n\r\n        <button\r\n          type=\"submit\"\r\n          style={{\r\n            backgroundColor: '#4CAF50',\r\n            color: 'white',\r\n            padding: '10px 20px',\r\n            border: 'none',\r\n            cursor: 'pointer',\r\n            width: '50%',\r\n          }}\r\n        >\r\n          Submit\r\n        </button>\r\n      </form>\r\n\r\n        {errorInfo && (\r\n            <div style={{ marginTop: '20px', color: 'red' }}>\r\n            <strong>Error:</strong> {JSON.stringify(errorInfo)}\r\n            </div>\r\n        )}\r\n\r\n        {result && !errorInfo && (\r\n            <div style={{ marginTop: '20px', color: 'green', whiteSpace: 'pre-wrap', wordWrap: 'break-word' }}>\r\n                <strong>Result:</strong>\r\n                <div>{result}</div>\r\n            </div>\r\n        )}\r\n\r\n    </div>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}